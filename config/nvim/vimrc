filetype plugin on
se nu
" ugly fix. searching python interpreters makes long startup time
let g:loaded_python_provider = 1

let g:vimsyn_embed = 'l'

set termguicolors
set background=dark
highlight MatchParen cterm=bold ctermbg=none ctermfg=magenta guibg=NONE guifg=Magenta

set mouse=a
set colorcolumn=80
highlight CursorLine guibg=#303030
highlight VertSplit  guibg=#303030
if has("mac") | hi Normal guibg=None | endif  " background transparency
set cmdheight=0
set laststatus=0  " with cmdheight=0
set shiftwidth=4
set softtabstop=4
set expandtab
set display+=lastline
set incsearch
set updatetime=300
let mapleader = ","
cnoreabbrev W w
nnoremap <silent> <C-N> :nohlsearch<cr>
nnoremap Q <Nop>
nnoremap vv $v^
" OSC52 yank for WSL2
vnoremap <Leader>c :OSCYank<CR>
" Any yank op
" autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is ''  | OSCYankReg " | endif
" Yank to system clipboard register
" autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '+' | OSCYankReg + | endif

set pastetoggle=<Leader>p

augroup file_type
  au!
  " Alternative: au FileType python AutoFormatBuffer autopep8
  " au FileType c,cpp,proto AutoFormatBuffer clang-format

  " au Filetype python nmap <LocalLeader>rn :Semshi rename
  au BufRead *.rkt se ft=racket
  au BufRead flake.lock se ft=json
  " au FileType python set equalprg=autopep8\ -
  au FileType scheme let b:AutoPairs = {"(": ")"}
  au Filetype python setlocal keywordprg=pydoc3
  au FileType python hi semshiImported ctermfg=214 guifg=#aaaaaa cterm=bold gui=bold
  au FileType python setlocal foldmethod=marker
  au FileType python,java setlocal shiftwidth=4 tabstop=4
  au FileType haskell hi Structure guifg=#00ffaf
  au FileType haskell hi Type      guifg=#61afef
  au FileType nasm,applescript,cmake,make setlocal omnifunc=syntaxcomplete#Complete
  au FileType cpp setlocal makeprg="cmake --build build"
  au FileType markdown setlocal textwidth=78 spell
  au FileType scheme inoreabbrev lambda λ
  au FileType go setlocal noexpandtab

  au FileType typescript,typescript.jsx,javascript,cpp,haskell,go,cabal,nix setlocal shiftwidth=2 tabstop=2
  "au FileType typescript :syn clear jsxAttrib
  " very slow
  " au FileType python se foldmethod=expr | se foldexpr=nvim_treesitter#foldexpr()
augroup END

let g:node_client_debug = 0

set tagfunc=CocTagFunc
" nnoremap <leader>m :CocList<cr>
nmap <leader>ac <Plug>(coc-codeaction)
nmap <leader>dg <Plug>(coc-diagnostic-info)
" nmap <leader>gt <Plug>(coc-action-doHover)
nmap <leader>sn <Plug>(coc-action-showSignatureHelp)
nmap <leader>cl <Plug>(coc-codelens-action)
nmap <leader>ji <Plug>(coc-implementation)
nmap <leader>jd <Plug>(coc-definition)
nmap <leader>jr <Plug>(coc-references)
nmap <leader>fx <Plug>(coc-fix-current)
nmap <leader>ft <Plug>(coc-format-selected)
vmap <leader>ft <Plug>(coc-format-selected)
nmap <silent>[w <Plug>(coc-diagnostic-prev)
nmap <silent>]w <Plug>(coc-diagnostic-next)
nmap <silent>[e <Plug>(coc-diagnostic-prev-error)
nmap <silent>]e <Plug>(coc-diagnostic-next-error)
nmap <leader>rn <Plug>(coc-rename)
inoremap <silent><expr> <C-X><C-O> coc#refresh()
nnoremap <silent><space> :call CocActionAsync('doHover')<cr>
command! -nargs=0 Format :call CocAction('format')  " format the whole buffer

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


augroup highlight_yank
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank { higroup='IncSearch', timeout=200 }
augroup END

syntax keyword schemeSyntax λ

nnoremap <Leader>e :CocCommand explorer <CR>

" clear italic
hi CocExplorerIndentLine cterm=NONE guifg=#303030

" Required for operations modifying multiple buffers like rename.
set hidden
set noshowmode  " Don't show INSERT/NORMAL... mode in cmdline
set completeopt-=preview

" show chunk diff at current position
nmap <Leader>d <Plug>(coc-git-chunkinfo)

" highlighting
" let g:haskell_enable_quantification   = 1  " `forall`
" let g:haskell_enable_recursivedo      = 1  " `mdo` and `rec`
" let g:haskell_enable_arrowsyntax      = 1  " `proc`
" let g:haskell_enable_pattern_synonyms = 1  " `pattern`
" let g:haskell_enable_typeroles        = 1  " type roles
" let g:haskell_enable_static_pointers  = 1  " `static`
" let g:haskell_backpack                = 1  " backpack keywords

function! s:delete_trailing_white_spaces()
  %s/\s\+$//ge
endfunction
command! DeleteTrailingWhiteSpaces call s:delete_trailing_white_spaces()

function! s:syntax_query() abort
  for id in synstack(line("."), col("."))
    echo synIDattr(id, "name")
  endfor
endfunction
command! SyntaxQuery call s:syntax_query()

" bracketed paste
if &term =~ '\(alacritty\|xterm.*\)'
    let &t_ti = &t_ti . "\e[?2004h"
    let &t_te = "\e[?2004l" . &t_te
    function! XTermPasteBegin(ret)
        set pastetoggle=<Esc>[201~
        set paste
        return a:ret
    endfunction
    map <expr> <Esc>[200~ XTermPasteBegin("i")
    imap <expr> <Esc>[200~ XTermPasteBegin("")
    vmap <expr> <Esc>[200~ XTermPasteBegin("c")
    cmap <Esc>[200~ <nop>
    cmap <Esc>[201~ <nop>
endif

function! s:convert__snake_case__to_camelCase()
  s#_\(\l\)#\u\1#g
endfunction
command! SnakecamelCase call s:convert__snake_case__to_camelCase()

function! s:convert__snake_case__to_CamelCase()
  s#_\(\l\)#\u\1#g
endfunction
command! SnakeCamelCase call s:convert__snake_case__to_camelCase()
